Microsoft (R) Macro Assembler Version 14.28.29913.0	    06/06/21 21:26:28
)String Primitives and Macros by Kent Cha		     Page 1 - 1


				TITLE String Primitives and Macros by Kent Chau

				; Author: Kent Chau
				; Last Modified: 6/6/21
				; OSU email address: chauke@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:   6              Due Date: 6/6/21
				; Description: This program will take input from user as strings within limits
				;				conver them to integers and then convert back to strings for display


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000000C			SIZE1 = 12

 00000000			.data

 00000000 44 65 73 69 67	intro		BYTE	"Designing  low - level I/O procedures by Kent Chau.", 13, 10, 0
	   6E 69 6E 67 20
	   20 6C 6F 77 20
	   2D 20 6C 65 76
	   65 6C 20 49 2F
	   4F 20 70 72 6F
	   63 65 64 75 72
	   65 73 20 62 79
	   20 4B 65 6E 74
	   20 43 68 61 75
	   2E 0D 0A 00
 00000036 50 6C 65 61 73	prompt1		BYTE	"Please provide 10 signed decimal integers. "
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 20
 00000061  45 61 63 68 20						db "Each number needs to be small enough to fit inside a 32 bit register. "
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
 000000A7  41 66 74 65 72						db "After you have finisehd inputting the raw numbers I will display a list "
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   65 68 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 20
 000000EF  6F 66 20 74 68						db "of the integers, their sum, and their average value.", 13, 10, 0
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2E 0D 0A 00
 00000126 50 6C 65 61 73	prompt2		BYTE	"Please enter a signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000145 50 6C 65 61 73	prompt3		BYTE	"Please try again: ", 0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 00000158  0000000C [		userString	BYTE	SIZE1 DUP(?)
	    00
	   ]
 00000164 00000000		slength		DWORD	?

 00000168 59 6F 75 20 65	entered		BYTE	"You entered the following numbers: ", 13, 10, 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   0D 0A 00
 0000018E 45 52 52 4F 52	error		BYTE	"ERROR: you did not enter a signed number or your number was too big.", 13, 10, 0
	   3A 20 79 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
	   00
 000001D5 54 68 65 20 72	average		BYTE	"The rounded average is: ", 0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 000001EE  0000000A [		tenArray	SDWORD	10 DUP(?)
	    00000000
	   ]
 00000216 00000004		typeTen		SDWORD	TYPE tenArray
 0000021A 0000000A		lenTen		SDWORD	LENGTHOF tenArray
 0000021E 00000028		sizeTen		SDWORD	SIZEOF tenArray


 00000222  00000064 [		test2Array	BYTE	100 DUP(?)
	    00
	   ]

 00000286 54 68 65 20 73	sumMessage	BYTE	"The sum of these numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00

 000002A4  00000001 [		sums		SDWORD	1 DUP(?)
	    00000000
	   ]
 000002A8 00000000		sumInt		SDWORD	0
 000002AC 00000004		sizeSums	SDWORD	SiZEOF sums
 000002B0  00000064 [		sumString	BYTE	100 DUP(?)
	    00
	   ]
 00000314 00			convert		BYTE	?
 00000315  00000001 [		averageIt	SDWORD	1 DUP(?)
	    00000000
	   ]
 00000319  00000064 [		aveString	BYTE	100 DUP(?)
	    00
	   ]
 0000037D 00000004		sizeAve		SDWORD	SIZEOF averageIt

 00000381 00000000		buffer1		SDWORD	0
 00000385 00000000		buffer2		SDWORD	0

 00000389 49 20 77 69 73	bye			BYTE	"I wish I could say this project was a pleasure...but ya 'know...ciao for now.", 13, 10, 0
	   68 20 49 20 63
	   6F 75 6C 64 20
	   73 61 79 20 74
	   68 69 73 20 70
	   72 6F 6A 65 63
	   74 20 77 61 73
	   20 61 20 70 6C
	   65 61 73 75 72
	   65 2E 2E 2E 62
	   75 74 20 79 61
	   20 27 6B 6E 6F
	   77 2E 2E 2E 63
	   69 61 6F 20 66
	   6F 72 20 6E 6F
	   77 2E 0D 0A 00

 00000000			.code
 00000000			main PROC

				;----------------------------------------------------
				;name: mGetString - gets user input as string, limited to numerics, and '+' or '1';
				;					also must fit within 32 bit register
				;preconditions: cannot be a letter or symbol outside of plus and minus, must be within
				;				-2147483648 and 2147483647
				;receives: string global, max, Dword array address, length of array
				;returns: string witin limits
				;----------------------------------------------------
				mGetString MACRO prompt, max, array, len

					push	edx
					push	ecx
					push	edi
					mov		edi, array
					mov		ecx, max
					mov		al, 0
					rep		stosb

					mov		edx,  prompt
					call	WriteString
					mov		edx, array
					mov		ecx, max
					call	ReadString
					
					mov		array, edx
					mov		len, eax
					mov		eax, 0
					pop		edi
					pop		ecx
					pop		edx
				ENDM

				;----------------------------------------------------
				;name: mDisplayString will take in an array and display it
				;preconditions: the array must be BYTE string format
				;receives: array of string/characters, size of that array
				;returns: none, displays string
				;----------------------------------------------------
				mDisplayString MACRO array, sizeof
					push ecx
					push edx
					push edi

					mov		edx, array
					add		edx, 1
					call	WriteString

					pop edi
					pop edx
					pop ecx



				ENDM


 00000000  68 00000036 R	push	OFFSET prompt1
 00000005  68 00000000 R	push	OFFSET intro
 0000000A  E8 000000E2		call	introduction

				; setting up loop or read val -----------------------
 0000000F  8B 0D 0000021A R	mov		ecx, lenTen				
 00000015  BF 000001EE R	mov		edi, OFFSET tenArray
 0000001A			_readval:
 0000001A  FF 35 00000385 R	push	buffer2		
 00000020  FF 35 00000381 R	push	buffer1		
 00000026  68 00000314 R	push	OFFSET convert		
 0000002B  68 00000145 R	push	OFFSET prompt3 
 00000030  68 0000018E R	push	OFFSET error 
 00000035  FF 35 00000164 R	push	slength   
 0000003B  68 000001EE R	push	OFFSET tenArray  
 00000040  FF 35 00000216 R	push	typeTen 
 00000046  FF 35 0000021A R	push	lenTen  
 0000004C  FF 35 0000021E R	push	sizeTen   
 00000052  68 00000126 R	push	OFFSET prompt2 
 00000057  68 00000158 R	push	OFFSET userString 
 0000005C  E8 000000CB		call	ReadVal
												
 00000061  89 17		mov		[edi], edx
 00000063  83 C7 04		add		edi, 4
 00000066  E2 B2		LOOP	_readval
				;-----------------------------------------------------

 00000068  68 00000168 R	push	OFFSET entered		
 0000006D  68 000001EE R	push	OFFSET tenArray		
 00000072  68 00000222 R	push	OFFSET test2Array	
 00000077  FF 35 0000021E R	push	sizeTen				
 0000007D  E8 000001E1		call	WriteVal

 00000082  68 000002A8 R	push	OFFSET sumInt				
 00000087  FF 35 0000021A R	push	lenTen				
 0000008D  68 000001EE R	push	OFFSET tenArray		
 00000092  68 000002A4 R	push	OFFSET sums				
 00000097  E8 0000026B		call	sumit

 0000009C  68 00000286 R	push	OFFSET sumMessage		
 000000A1  68 000002A4 R	push	OFFSET sums		
 000000A6  68 000002B0 R	push	OFFSET sumString	
 000000AB  FF 35 000002AC R	push	sizeSums			
 000000B1  E8 000001AD		call	WriteVal

 000000B6  68 00000315 R	push	OFFSET averageIt  
 000000BB  FF 35 000002A8 R	push	sumInt			
 000000C1  E8 0000027D		call	averageProc

 000000C6  68 000001D5 R	push	OFFSET average		
 000000CB  68 00000315 R	push	OFFSET averageIt	
 000000D0  68 00000319 R	push	OFFSET aveString	
 000000D5  FF 35 0000037D R	push	sizeAve			
 000000DB  E8 00000183		call	WriteVal

 000000E0  68 00000389 R	push	OFFSET bye
 000000E5  E8 000002C5		call	byebye


					Invoke ExitProcess,0	; exit to operating system
 000000EA  6A 00	   *	    push   +000000000h
 000000EC  E8 00000000 E   *	    call   ExitProcess
 000000F1			main ENDP
				;----------------------------------------------------
				;name: Instruction procedure, display program
				;		instructions and display instructions
				;preconditions: mDisplayString
				;postconditions: none
				;receives: prompt1, intro
				;returns: none
				;----------------------------------------------------
 000000F1			introduction PROC
 000000F1  55				push	ebp
 000000F2  8B EC			mov		ebp, esp
 000000F4  52				push	edx
 000000F5  8B 55 08			mov	    edx, [ebp +8]
 000000F8  4A				dec		edx
					
					mDisplayString edx
 000000F9  51		     1		push ecx
 000000FA  52		     1		push edx
 000000FB  57		     1		push edi
 000000FC  8B D2	     1		mov		edx, edx
 000000FE  83 C2 01	     1		add		edx, 1
 00000101  E8 00000000 E     1		call	WriteString
 00000106  5F		     1		pop edi
 00000107  5A		     1		pop edx
 00000108  59		     1		pop ecx
 00000109  E8 00000000 E		call	CrLf
 0000010E  8B 55 0C			mov		edx, [ebp +12]
 00000111  4A				dec		edx
					mDisplayString edx
 00000112  51		     1		push ecx
 00000113  52		     1		push edx
 00000114  57		     1		push edi
 00000115  8B D2	     1		mov		edx, edx
 00000117  83 C2 01	     1		add		edx, 1
 0000011A  E8 00000000 E     1		call	WriteString
 0000011F  5F		     1		pop edi
 00000120  5A		     1		pop edx
 00000121  59		     1		pop ecx

 00000122  E8 00000000 E		call	CrLf
 00000127  5A				pop		edx
 00000128  5D				pop		ebp
 00000129  C2 0008			ret		8
 0000012C			introduction	ENDP

				;----------------------------------------------------
				;name: will get input from user read them as strings
				;preconditions: user inputs must be numeric, and
				;				not larger or smaller than allowed in
				;				32 bit registers, symbols outside of
				;				'+' or '-' not allowed, and no letters,
				;				mGetString macro
				;postconditions: passing back value from edx
				;receives: buffer1, buffer2, convert, prompt3, error,
				;			slength, tenArray, typeTen, lenTen, sizeTen,
				;			prompt2, userString
				;returns: user input, numeric converted string, modifies
				;			edx register, tenArray, userString, convert,
				;			buffer1, buffer2, slength
				;----------------------------------------------------
 0000012C			ReadVal PROC
 0000012C  55				push	ebp
 0000012D  8B EC			mov		ebp, esp
					
 0000012F  57				push	edi
 00000130  51				push	ecx
 00000131  8B 7D 2C			mov		edi, [ebp +44]	;store number conversion as string byte
 00000134				_prompting:
					mGetString [ebp +12], SIZE1, [ebp +8], [ebp +32]
 00000134  52		     1		push	edx
 00000135  51		     1		push	ecx
 00000136  57		     1		push	edi
 00000137  8B 7D 08	     1		mov		edi, [ebp +8]
 0000013A  B9 0000000C	     1		mov		ecx, SIZE1
 0000013F  B0 00	     1		mov		al, 0
 00000141  F3/ AA	     1		rep		stosb
 00000143  8B 55 0C	     1		mov		edx,  [ebp +12]
 00000146  E8 00000000 E     1		call	WriteString
 0000014B  8B 55 08	     1		mov		edx, [ebp +8]
 0000014E  B9 0000000C	     1		mov		ecx, SIZE1
 00000153  E8 00000000 E     1		call	ReadString
 00000158  89 55 08	     1		mov		[ebp +8], edx
 0000015B  89 45 20	     1		mov		[ebp +32], eax
 0000015E  B8 00000000	     1		mov		eax, 0
 00000163  5F		     1		pop		edi
 00000164  59		     1		pop		ecx
 00000165  5A		     1		pop		edx
					
 00000166				_stringreceived:
					
 00000166  8B 75 08			mov		esi, [ebp +8]	;userString
 00000169  8B 4D 20			mov		ecx, [ebp +32]	;slength

 0000016C				_validate:				; do checks of sign and number against ascii
 0000016C  AC				LODSB					; puts byte in AL
 0000016D  3C 2B			cmp		al, 43
 0000016F  74 14			je		_itsfine
 00000171  3C 2D			cmp		al, 45
 00000173  74 10			je		_itsfine

 00000175  3C 30			cmp		al, 48
 00000177  0F 8C 00000095		jl		_error
 0000017D  3C 39			cmp		al, 57
 0000017F  0F 8F 0000008D		jg		_error
					
 00000185				_itsfine:
 00000185  E2 E5			LOOP	_validate
					
 00000187  B8 00000000			mov		eax, 0 
 0000018C  8B 4D 20			mov		ecx, [ebp +32]
					
 0000018F				_convert:				; jump dependent on sign or not signed
 0000018F  8B 75 08			mov		esi, [ebp +8]
 00000192  AC				LODSB
 00000193  3C 2B			cmp		al, 43
 00000195  74 27			je		_convertplus
 00000197  3C 2D			cmp		al, 45
 00000199  74 4C			je		_convertwithsign
 0000019B  BA 00000000			mov		edx, 0
					
 000001A0				_convertunsign:
 000001A0  51				push	ecx
 000001A1  2C 30			sub		al, 48
 000001A3  0F B6 C8			movzx	ecx, al			; move al to edx a larger register
 000001A6  B8 0000000A			mov		eax, 10
 000001AB  8B DA			mov		ebx, edx 
 000001AD  F7 E3			mul		ebx
 000001AF  03 C1			add		eax, ecx
 000001B1  8B D0			mov		edx, eax
 000001B3  59				pop		ecx
					
 000001B4  AC				LODSB
 000001B5  E2 E9			LOOP	_convertunsign

 000001B7  6B D2 01			imul	edx, 1			;test and watch flag for overflow/sign
 000001BA  78 56			js		_error
 000001BC  EB 52			jmp		_xconvert
					
 000001BE				_convertplus:
 000001BE  B8 00000000			mov		eax, 0			;clear eax
 000001C3  49				dec		ecx
 000001C4  BA 00000000			mov		edx, 0			;store the answer
					
 000001C9				_tests:
 000001C9  AC				LODSB
 000001CA  51				push	ecx
 000001CB  2C 30			sub		al, 48
 000001CD  0F BE C8			movsx	ecx, al			; move al to edx
 000001D0  B8 0000000A			mov		eax, 10
 000001D5  8B DA			mov		ebx, edx 
 000001D7  F7 E3			mul		ebx
 000001D9  03 C1			add		eax, ecx
 000001DB  8B D0			mov		edx, eax
 000001DD  59				pop		ecx

 000001DE  E2 E9			LOOP	_tests

 000001E0  6B C0 01			imul	eax, 1			;test and check for overflow with sign flag
 000001E3  78 2D			js		_error
 000001E5  EB 29			jmp		_xconvert

 000001E7				_convertwithsign:
 000001E7  49				dec		ecx
 000001E8  B8 00000000			mov		eax, 0			
 000001ED  BA 00000000			mov		edx, 0			

 000001F2				_convertwithsignII:		;negativ handling	
 000001F2  AC				LODSB
 000001F3  51				push	ecx
 000001F4  2C 30			sub		al, 48
 000001F6  0F BE C8			movsx	ecx, al			; move al to edx 
 000001F9  B8 0000000A			mov		eax, 10
 000001FE  8B DA			mov		ebx, edx 
 00000200  F7 E3			mul		ebx
 00000202  03 C1			add		eax, ecx
 00000204  8B D0			mov		edx, eax
 00000206  59				pop		ecx

 00000207  E2 E9			LOOP	_convertwithsignII

 00000209  6B C0 FF			imul	eax, -1
 0000020C  79 04			jns		_error
 0000020E  F7 DA			neg		edx
					
 00000210				_xconvert:
 00000210  EB 4B			jmp		_xerror

 00000212				_error:
 00000212  8B 55 24			mov		edx, [ebp +36]	;error
 00000215  4A				dec		edx
					mDisplayString edx
 00000216  51		     1		push ecx
 00000217  52		     1		push edx
 00000218  57		     1		push edi
 00000219  8B D2	     1		mov		edx, edx
 0000021B  83 C2 01	     1		add		edx, 1
 0000021E  E8 00000000 E     1		call	WriteString
 00000223  5F		     1		pop edi
 00000224  5A		     1		pop edx
 00000225  59		     1		pop ecx
					mGetString [ebp +40], SIZE1, [ebp +8], [ebp +32]
 00000226  52		     1		push	edx
 00000227  51		     1		push	ecx
 00000228  57		     1		push	edi
 00000229  8B 7D 08	     1		mov		edi, [ebp +8]
 0000022C  B9 0000000C	     1		mov		ecx, SIZE1
 00000231  B0 00	     1		mov		al, 0
 00000233  F3/ AA	     1		rep		stosb
 00000235  8B 55 28	     1		mov		edx,  [ebp +40]
 00000238  E8 00000000 E     1		call	WriteString
 0000023D  8B 55 08	     1		mov		edx, [ebp +8]
 00000240  B9 0000000C	     1		mov		ecx, SIZE1
 00000245  E8 00000000 E     1		call	ReadString
 0000024A  89 55 08	     1		mov		[ebp +8], edx
 0000024D  89 45 20	     1		mov		[ebp +32], eax
 00000250  B8 00000000	     1		mov		eax, 0
 00000255  5F		     1		pop		edi
 00000256  59		     1		pop		ecx
 00000257  5A		     1		pop		edx
 00000258  E9 FFFFFF09			jmp		_stringreceived

 0000025D				_xerror:
 0000025D  59				pop		ecx
 0000025E  5F				pop		edi

 0000025F  5D				pop		ebp
 00000260  C2 0030			ret		48
 00000263			readVal ENDP

				;----------------------------------------------------
				;name: change array of integers to array of strings and display
				;preconditions: validated inputs, array of valid inputs, DWORD array,
				;				mDisplayString
				;postconditions: must be integers array valid inputs
				;receives: first call: entered, tenArray, test2Array, sizeTen,
				;			second call: sumMessage, sums, sumString, sizeSum
				;			third call: average, averageIt, aveString, sizeAve
				;returns: first call: test2Array
				;			scond call: sumString
				;			third call: aveString
				;----------------------------------------------------
 00000263			WriteVal PROC
 00000263  55			push	ebp
 00000264  8B EC		mov		ebp, esp

 00000266  50			push	eax
 00000267  53			push	ebx
 00000268  51			push	ecx
 00000269  52			push	edx
 0000026A  E8 00000000 E	call	CrLf
 0000026F  52			push	edx
 00000270  8B 55 14		mov		edx, [ebp +20]		;entered
 00000273  4A			dec		edx
				mDisplayString edx
 00000274  51		     1		push ecx
 00000275  52		     1		push edx
 00000276  57		     1		push edi
 00000277  8B D2	     1		mov		edx, edx
 00000279  83 C2 01	     1		add		edx, 1
 0000027C  E8 00000000 E     1		call	WriteString
 00000281  5F		     1		pop edi
 00000282  5A		     1		pop edx
 00000283  59		     1		pop ecx
 00000284  5A			pop		edx

 00000285  8B 75 10		mov		esi, [ebp +16]		;OFFSET testArray
 00000288  8B 7D 0C		mov		edi, [ebp +12]		;OFFSET test2Array
 0000028B  03 7D 08add		edi, [ebp +8]		;SIZEOF testArray
 0000028E  83 C7 03		add		edi, 3
 00000291  8B 4D 08		mov		ecx, [ebp +8]		;SIZEOF testArray
 00000294  50			push	eax
 00000295  B0 00		mov		al, 0
 00000297  FD			std
 00000298  AA			stosb
 00000299  58			pop		eax

 0000029A			_toptest:					; loop through array, changing elements
 0000029A  83 E9 04		sub		ecx, 4
 0000029D  8B 04 0E		mov		eax, [esi +ecx]
 000002A0  83 F8 00		cmp		eax, 0
 000002A3  50			push	eax
 000002A4  B0 20		mov		al, 32
 000002A6  AA			stosb
 000002A7  58			pop		eax
 000002A8  BB 0000000A		mov		ebx, 10

 000002AD			_signedcheck:				; handlng negative numbers
 000002AD  78 1C		js		_signed

 000002AF			_top:						;loop conversion
 000002AF  BA 00000000		mov		edx, 0
 000002B4  F7 FB		idiv	ebx
 000002B6  83 C2 30		add		edx, 48 
 000002B9  50			push	eax
 000002BA  8B C2		mov		eax, edx
 000002BC  FD			std
 000002BD  AA			stosb
 000002BE  58			pop		eax
 000002BF  83 F8 00		cmp		eax, 0
 000002C2  75 EB		jne		_top

 000002C4			_backfromsigned:
 000002C4  83 F9 00		cmp		ecx, 0
 000002C7  75 D1		jne		_toptest
 000002C9  EB 1F		jmp		_xsigned

 000002CB			_signed:
 000002CB  F7 D8		neg		eax

 000002CD			_top2:						;loop conversion
 000002CD  BA 00000000		mov		edx, 0
 000002D2  F7 FB		idiv	ebx
 000002D4  83 C2 30		add		edx, 48 
 000002D7  50			push	eax
 000002D8  8B C2		mov		eax, edx
 000002DA  FD			std
 000002DB  AA			stosb
 000002DC  58			pop		eax
 000002DD  83 F8 00		cmp		eax, 0
 000002E0  75 EB		jne		_top2
 000002E2  50			push	eax
 000002E3  B0 2D		mov		al, 45
 000002E5  FD			std
 000002E6  AA			stosb
 000002E7  58			pop		eax
 000002E8  EB DA		jmp		_backfromsigned


 000002EA			_xsigned:
				mDisplayString edi, [ebp +8]
 000002EA  51		     1		push ecx
 000002EB  52		     1		push edx
 000002EC  57		     1		push edi
 000002ED  8B D7	     1		mov		edx, edi
 000002EF  83 C2 01	     1		add		edx, 1
 000002F2  E8 00000000 E     1		call	WriteString
 000002F7  5F		     1		pop edi
 000002F8  5A		     1		pop edx
 000002F9  59		     1		pop ecx

 000002FA  E8 00000000 E	call	CrLf
 000002FF  5A			pop		edx
 00000300  59			pop		ecx
 00000301  5B			pop		ebx
 00000302  58			pop		eax

 00000303  5D			pop		ebp
 00000304  C2 000C		ret		12
 00000307			WriteVal ENDP

				;----------------------------------------------------
				;name: To sum the number given in the array
				;preconditions: validated user inputs 
				;postconditions: mDisplayString
				;receives: sumInt, lenTen, tenArray, sums
				;returns: sums, sumInt
				;----------------------------------------------------
 00000307			sumit PROC
 00000307  55			push	ebp
 00000308  8B EC		mov		ebp, esp
 0000030A  51			push	ecx
 0000030B  53			push	ebx
 0000030C  52			push	edx
 0000030D  57			push	edi
 0000030E  50			push	eax

 0000030F  8B 4D 10		mov		ecx, [ebp +16]		;len
 00000312  BB 00000000		mov		ebx, 0
 00000317  8B 55 0C		mov		edx, [ebp +12]		;array addy
 0000031A  BF 00000000		mov		edi, 0

 0000031F			_loopA:						;loop for adding
 0000031F  8B 04 1A		mov		eax, [edx +ebx]
 00000322  03 F8		add		edi, eax
 00000324  83 C3 04		add		ebx, 4
 00000327  E2 F6		LOOP	_loopA
 00000329  E8 00000000 E	call	CrLf
 0000032E  50			push	eax
 0000032F  8B 45 08		mov		eax, [ebp +8]
 00000332  89 38		mov		[eax], edi
 00000334  8B 45 14		mov		eax, [ebp +20]
 00000337  89 38		mov		[eax], edi
 00000339  58			pop		eax
 0000033A  58			pop		eax
 0000033B  5F			pop		edi
 0000033C  5A			pop		edx
 0000033D  5B			pop		ebx
 0000033E  59			pop		ecx

 0000033F  5D			pop		ebp
 00000340  C2 000C		ret		12
 00000343			sumit ENDP

				;----------------------------------------------------
				;name:  Calculate the average of the given array
				;preconditions: validated user inputs
				;postconditions: mDisplayString
				;receives: averageIt, sumInt
				;returns: averageIt
				;----------------------------------------------------
 00000343			averageProc PROC
 00000343  55			push	ebp
 00000344  8B EC		mov		ebp, esp

 00000346  8B 45 08		mov		eax, [ebp +8]	;sumInt
 00000349  83 F8 00		cmp		eax, 0			;handling neg values
 0000034C  78 25		js		_signed
 0000034E  99			cdq
 0000034F  BA 00000000		mov		edx, 0
 00000354  BB 0000000A		mov		ebx, 10			;get the average
 00000359  F7 FB		idiv	ebx
 0000035B  50			push	eax
 0000035C  6B D2 0A		imul	edx, 10			;multiply remainder by 10
 0000035F  8B C2		mov		eax, edx
 00000361  BA 00000000		mov		edx, 0
 00000366  99			cdq
 00000367  F7 FB		idiv	ebx				;div to get remainder value from tenths place
 00000369  8B C8		mov		ecx, eax		;number to compare and either add one or leave as is
 0000036B  58			pop		eax
 0000036C  83 F9 05		cmp		ecx, 5
 0000036F  7D 32		jge		_addit
 00000371  EB 33		jmp		_xaddit

 00000373			_signed:				;negative handling
 00000373  F7 D8		neg		eax
 00000375  99			cdq
 00000376  BA 00000000		mov		edx, 0
 0000037B  BB 0000000A		mov		ebx, 10
 00000380  F7 FB		idiv	ebx

 00000382  50			push	eax
 00000383  6B D2 0A		imul	edx, 10
 00000386  8B C2		mov		eax, edx
 00000388  BA 00000000		mov		edx, 0
 0000038D  99			cdq
 0000038E  F7 FB		idiv	ebx
 00000390  8B C8		mov		ecx, eax		;number to compare
 00000392  58			pop		eax
 00000393  83 F9 05		cmp		ecx, 5
 00000396  7D 04		jge		_additsign
 00000398  F7 D8		neg		eax
 0000039A  EB 0A		jmp		_xaddit

 0000039C			_additsign:				;handling negative
 0000039C  83 E8 01		sub		eax, 1
 0000039F  F7 D8		neg		eax
 000003A1  EB 03		jmp		_xaddit

 000003A3			_xsigned:
 000003A3			_addit:
 000003A3  83 C0 01		add		eax, 1

 000003A6			_xaddit:
 000003A6  8B 5D 0C		mov		ebx, [ebp +12]
 000003A9  89 03		mov		[ebx], eax

 000003AB  5D			pop		ebp
 000003AC  C2 0008		ret		8
 000003AF			averageProc ENDP

				;----------------------------------------------------
				;name: bybye procedure, display farewell
				;preconditions: mDisplayString
				;postconditions: none
				;receives: bye global
				;returns: none
				;----------------------------------------------------
 000003AF			byebye PROC
 000003AF  55			push	ebp
 000003B0  8B EC		mov		ebp, esp
 000003B2  E8 00000000 E	call	CrLf
 000003B7  52			push	edx
 000003B8  8B 55 08		mov		edx, [ebp +8]
 000003BB  4A			dec		edx
				mDisplayString edx
 000003BC  51		     1		push ecx
 000003BD  52		     1		push edx
 000003BE  57		     1		push edi
 000003BF  8B D2	     1		mov		edx, edx
 000003C1  83 C2 01	     1		add		edx, 1
 000003C4  E8 00000000 E     1		call	WriteString
 000003C9  5F		     1		pop edi
 000003CA  5A		     1		pop edx
 000003CB  59		     1		pop ecx
 000003CC  5A			pop		edx
 000003CD  5D			pop		ebp
 000003CE  C2 0008		ret		8
 000003D1			byebye ENDP
				END main
Microsoft (R) Macro Assembler Version 14.28.29913.0	    06/06/21 21:26:28
)String Primitives and Macros by Kent Cha		     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000003D9 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003D1 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 0000012C _TEXT	Length= 00000137 Public STDCALL
  _prompting . . . . . . . . . .	L Near	 00000134 _TEXT	
  _stringreceived  . . . . . . .	L Near	 00000166 _TEXT	
  _validate  . . . . . . . . . .	L Near	 0000016C _TEXT	
  _itsfine . . . . . . . . . . .	L Near	 00000185 _TEXT	
  _convert . . . . . . . . . . .	L Near	 0000018F _TEXT	
  _convertunsign . . . . . . . .	L Near	 000001A0 _TEXT	
  _convertplus . . . . . . . . .	L Near	 000001BE _TEXT	
  _tests . . . . . . . . . . . .	L Near	 000001C9 _TEXT	
  _convertwithsign . . . . . . .	L Near	 000001E7 _TEXT	
  _convertwithsignII . . . . . .	L Near	 000001F2 _TEXT	
  _xconvert  . . . . . . . . . .	L Near	 00000210 _TEXT	
  _error . . . . . . . . . . . .	L Near	 00000212 _TEXT	
  _xerror  . . . . . . . . . . .	L Near	 0000025D _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000263 _TEXT	Length= 000000A4 Public STDCALL
  _toptest . . . . . . . . . . .	L Near	 0000029A _TEXT	
  _signedcheck . . . . . . . . .	L Near	 000002AD _TEXT	
  _top . . . . . . . . . . . . .	L Near	 000002AF _TEXT	
  _backfromsigned  . . . . . . .	L Near	 000002C4 _TEXT	
  _signed  . . . . . . . . . . .	L Near	 000002CB _TEXT	
  _top2  . . . . . . . . . . . .	L Near	 000002CD _TEXT	
  _xsigned . . . . . . . . . . .	L Near	 000002EA _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
averageProc  . . . . . . . . . .	P Near	 00000343 _TEXT	Length= 0000006C Public STDCALL
  _signed  . . . . . . . . . . .	L Near	 00000373 _TEXT	
  _additsign . . . . . . . . . .	L Near	 0000039C _TEXT	
  _xsigned . . . . . . . . . . .	L Near	 000003A3 _TEXT	
  _addit . . . . . . . . . . . .	L Near	 000003A3 _TEXT	
  _xaddit  . . . . . . . . . . .	L Near	 000003A6 _TEXT	
byebye . . . . . . . . . . . . .	P Near	 000003AF _TEXT	Length= 00000022 Public STDCALL
introduction . . . . . . . . . .	P Near	 000000F1 _TEXT	Length= 0000003B Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000F1 Public STDCALL
  _readval . . . . . . . . . . .	L Near	 0000001A _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sumit  . . . . . . . . . . . . .	P Near	 00000307 _TEXT	Length= 0000003C Public STDCALL
  _loopA . . . . . . . . . . . .	L Near	 0000031F _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SIZE1  . . . . . . . . . . . . .	Number	 0000000Ch   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
aveString  . . . . . . . . . . .	Byte	 00000319 _DATA	
averageIt  . . . . . . . . . . .	DWord	 00000315 _DATA	
average  . . . . . . . . . . . .	Byte	 000001D5 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer1  . . . . . . . . . . . .	DWord	 00000381 _DATA	
buffer2  . . . . . . . . . . . .	DWord	 00000385 _DATA	
bye  . . . . . . . . . . . . . .	Byte	 00000389 _DATA	
convert  . . . . . . . . . . . .	Byte	 00000314 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
entered  . . . . . . . . . . . .	Byte	 00000168 _DATA	
error  . . . . . . . . . . . . .	Byte	 0000018E _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lenTen . . . . . . . . . . . . .	DWord	 0000021A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
prompt1  . . . . . . . . . . . .	Byte	 00000036 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 00000126 _DATA	
prompt3  . . . . . . . . . . . .	Byte	 00000145 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sizeAve  . . . . . . . . . . . .	DWord	 0000037D _DATA	
sizeSums . . . . . . . . . . . .	DWord	 000002AC _DATA	
sizeTen  . . . . . . . . . . . .	DWord	 0000021E _DATA	
slength  . . . . . . . . . . . .	DWord	 00000164 _DATA	
sumInt . . . . . . . . . . . . .	DWord	 000002A8 _DATA	
sumMessage . . . . . . . . . . .	Byte	 00000286 _DATA	
sumString  . . . . . . . . . . .	Byte	 000002B0 _DATA	
sums . . . . . . . . . . . . . .	DWord	 000002A4 _DATA	
tenArray . . . . . . . . . . . .	DWord	 000001EE _DATA	
test2Array . . . . . . . . . . .	Byte	 00000222 _DATA	
typeTen  . . . . . . . . . . . .	DWord	 00000216 _DATA	
userString . . . . . . . . . . .	Byte	 00000158 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
